@page "/create"
@page "/edit/{Id:int}"

@inject IApiClient apiClient
@inject NavigationManager NavManager

<h3>@title</h3>

<EditForm EditContext="@editContext" OnValidSubmit="@FormSubmitted">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="title" class="col-sm-2 col-form-label">
            Title
        </label>
        <div class="col-sm-10">
            <InputText id="title" class="form-control" placeholder="Title" @bind-Value="product.Name" />
            <ValidationMessage For="@(() => product.Name)" />
        </div>
    </div>

    <div class="form-group row" style="margin-top:20px">
        <label class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Product product = new Product();
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;
    private string title = "Edit";

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            editContext = new EditContext(product);
            messageStore = new ValidationMessageStore(editContext);
            title = "Add";
            return;
        }

        var result = await apiClient.Get(Id);
        if (result.HasError)
        {
            // Kui viga tekkis, näita seda vormil
            AddValidationErrors(result);
            return;
        }

        product = result.Value;
        editContext = new EditContext(product);
        messageStore = new ValidationMessageStore(editContext);
    }

    private async Task FormSubmitted()
    {
        var result = await apiClient.Save(product);
        if (result.HasError)
        {
            AddValidationErrors(result);
            return;
        }

        NavManager.NavigateTo("/");
    }

    private void AddValidationErrors(Result result)
    {
        foreach (var error in result.Errors)
        {
            foreach (var message in error.Value)
            {
                var id = new FieldIdentifier(product, error.Key);
                messageStore?.Add(id, message);
            }
        }

        editContext?.NotifyValidationStateChanged();
    }
}
